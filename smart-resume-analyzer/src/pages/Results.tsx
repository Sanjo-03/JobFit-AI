import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";
import { Copy, Download, RefreshCw, ArrowLeft, CheckCircle, XCircle, AlertCircle } from "lucide-react";
import { toast } from "sonner";

interface AnalysisData {
  matchScore: number;
  feedback: {
    overall: string;
    strengths: string[];
    areasForImprovement: string[];
    keyMismatches: string[];
  };
  suggestedImprovementsForTechRoles: string[];
}

const styles = `
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  .animate-fade-in-up {
    animation: fadeInUp 0.6s ease-out forwards;
  }
`;

const Results = () => {
  const [isCopied, setIsCopied] = useState(false);
  const navigate = useNavigate();

  const storedAnalysis = localStorage.getItem('fullAnalysisResult');
  const [analysisData, setAnalysisData] = useState<AnalysisData | null>(null);

  useEffect(() => {
    if (storedAnalysis) {
      try {
        setAnalysisData(JSON.parse(storedAnalysis));
      } catch (e) {
        console.error("Failed to parse analysis data from localStorage", e);
        setAnalysisData(null);
        toast.error("Error loading analysis data. Please try re-analyzing.");
      }
    }
  }, [storedAnalysis]);

  const handleCopyFeedback = async () => {
    if (!analysisData) {
      toast.error("No analysis data to copy.");
      return;
    }
    let fullFeedback = `SMART RESUME ANALYZER - FEEDBACK REPORT\n\n`;
    fullFeedback += `Match Score: ${analysisData.matchScore}/100\n\n`;
    fullFeedback += `Overall Feedback: ${analysisData.feedback.overall}\n\n`;

    if (analysisData.feedback.strengths && analysisData.feedback.strengths.length > 0) {
      fullFeedback += `Strengths:\n- ${analysisData.feedback.strengths.join('\n- ')}\n\n`;
    }
    if (analysisData.feedback.areasForImprovement && analysisData.feedback.areasForImprovement.length > 0) {
      fullFeedback += `Areas for Improvement:\n- ${analysisData.feedback.areasForImprovement.join('\n- ')}\n\n`;
    }
    if (analysisData.feedback.keyMismatches && analysisData.feedback.keyMismatches.length > 0) {
      fullFeedback += `Key Mismatches:\n- ${analysisData.feedback.keyMismatches.join('\n- ')}\n\n`;
    }
    if (analysisData.suggestedImprovementsForTechRoles && analysisData.suggestedImprovementsForTechRoles.length > 0) {
      fullFeedback += `Suggested Improvements (If Applying for Tech Roles):\n- ${analysisData.suggestedImprovementsForTechRoles.join('\n- ')}\n\n`;
    }
    fullFeedback += `\n---\nGenerated by Smart Resume Analyzer\nBuilt by Sanjo\nDate: ${new Date('2025-07-26T13:42:00Z').toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}`; // 07:12 PM IST, July 26, 2025

    try {
      await navigator.clipboard.writeText(fullFeedback);
      setIsCopied(true);
      toast.success("Feedback copied to clipboard!");
      setTimeout(() => setIsCopied(false), 2000);
    } catch (error) {
      toast.error("Failed to copy feedback");
    }
  };

  const handleDownloadPDF = () => {
    if (!analysisData) {
      toast.error("No analysis data to download.");
      return;
    }

    const element = document.createElement('div');
    element.innerHTML = `
      <h1 style="font-size: 24px; font-weight: bold; text-align: center; margin-bottom: 20px;">SMART RESUME ANALYZER - FEEDBACK REPORT</h1>
      <p style="font-size: 18px; text-align: center; margin-bottom: 20px;">Date: ${new Date('2025-07-26T13:42:00Z').toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}</p> <!-- 07:12 PM IST, July 26, 2025 -->
      <h2 style="font-size: 20px; font-weight: bold; margin-bottom: 10px;">Match Score: ${analysisData.matchScore}/100</h2>
      <p style="font-size: 16px; margin-bottom: 20px;">${analysisData.feedback.overall}</p>
      ${analysisData.feedback.strengths.length > 0 ? `<h3 style="font-size: 18px; font-weight: bold; margin-bottom: 10px;">Strengths</h3><ul style="font-size: 16px; margin-bottom: 20px;">${analysisData.feedback.strengths.map(item => `<li>${item}</li>`).join('')}</ul>` : ''}
      ${analysisData.feedback.areasForImprovement.length > 0 ? `<h3 style="font-size: 18px; font-weight: bold; margin-bottom: 10px;">Areas for Improvement</h3><ul style="font-size: 16px; margin-bottom: 20px;">${analysisData.feedback.areasForImprovement.map(item => `<li>${item}</li>`).join('')}</ul>` : ''}
      ${analysisData.feedback.keyMismatches.length > 0 ? `<h3 style="font-size: 18px; font-weight: bold; margin-bottom: 10px;">Key Mismatches</h3><ul style="font-size: 16px; margin-bottom: 20px;">${analysisData.feedback.keyMismatches.map(item => `<li>${item}</li>`).join('')}</ul>` : ''}
      ${analysisData.suggestedImprovementsForTechRoles.length > 0 ? `<h3 style="font-size: 18px; font-weight: bold; margin-bottom: 10px;">Suggested Improvements (If Applying for Tech Roles)</h3><ul style="font-size: 16px; margin-bottom: 20px;">${analysisData.suggestedImprovementsForTechRoles.map(item => `<li>${item}</li>`).join('')}</ul>` : ''}
      <p style="font-size: 14px; text-align: center; margin-top: 20px;">Generated by Smart Resume Analyzer | Built by Sanjo</p>
    `;

    // Use html2pdf to generate and download the PDF
    // @ts-ignore
    html2pdf().from(element).set({
      margin: 10,
      filename: `resume_analysis_${new Date('2025-07-26').toLocaleDateString('en-IN')}.pdf`,
      html2canvas: { scale: 2 },
      jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
    }).save();
  };

  const handleStartOver = () => {
    localStorage.clear();
    navigate('/');
  };

  if (!analysisData) {
    return (
      <div className="min-h-screen flex items-center justify-center p-4 sm:p-6 lg:p-8 bg-gradient-to-br from-teal-100 via-blue-100 to-lavender-100 dark:from-gray-800 dark:to-gray-900 text-foreground">
        <Card className="max-w-md w-full bg-white/30 dark:bg-gray-800/30 backdrop-blur-md border border-white/20 dark:border-gray-700/20 shadow-lg rounded-2xl animate-fade-in-up">
          <CardHeader className="text-center">
            <CardTitle className="text-3xl font-extrabold text-gray-800 dark:text-white">No Analysis Found</CardTitle>
            <CardDescription className="text-lg text-gray-600 dark:text-gray-300">It looks like you haven't analyzed a resume yet.</CardDescription>
          </CardHeader>
          <CardContent className="text-center">
            <Button onClick={() => navigate('/')} className="w-full h-12 text-lg bg-teal-500 hover:bg-teal-600 dark:bg-teal-600 dark:hover:bg-teal-700 text-white rounded-lg shadow-md hover:shadow-lg transition-all duration-200 transform hover:scale-105">
              Start New Analysis
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  const matchScoreColor =
    analysisData.matchScore >= 75
      ? 'text-green-500'
      : analysisData.matchScore >= 50
      ? 'text-yellow-500'
      : 'text-red-500';

  return (
    <div className="min-h-screen p-4 sm:p-6 lg:p-8 bg-gradient-to-br from-teal-100 via-blue-100 to-lavender-100 dark:from-gray-800 dark:to-gray-900 text-foreground">
      <div className="max-w-4xl mx-auto space-y-8 animate-fade-in-up">
        <div className="text-center space-y-4 relative">
          <Button
            variant="ghost"
            onClick={() => navigate('/job-description')}
            className="absolute left-0 top-0 flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-teal-500 dark:hover:text-teal-400 transition-colors duration-200"
          >
            <ArrowLeft className="h-5 w-5" /> Back
          </Button>
          <h1 className="text-5xl font-extrabold text-gray-800 dark:text-white tracking-tight">Your Analysis Report</h1>
          <p className="text-xl text-gray-600 dark:text-gray-300 max-w-lg mx-auto">Detailed feedback and suggestions to optimize your resume.</p>
        </div>

        <Card className="p-8 text-center bg-white/30 dark:bg-gray-800/30 backdrop-blur-md border border-white/20 dark:border-gray-700/20 shadow-xl rounded-2xl transition-all duration-200 hover:shadow-2xl">
          <CardTitle className="text-4xl font-extrabold text-gray-800 dark:text-white mb-6">Match Score</CardTitle>
          <p className={`text-6xl font-black ${matchScoreColor} leading-none mb-4`}>
            {analysisData.matchScore}/100
          </p>
          <CardDescription className="text-lg text-gray-600 dark:text-gray-300">
            {analysisData.feedback.overall}
          </CardDescription>
        </Card>

        <div className="flex flex-wrap gap-4 justify-center">
          <Button onClick={handleCopyFeedback} variant="outline" className="h-12 text-lg px-6 bg-white/20 hover:bg-teal-500 hover:text-white dark:bg-gray-700/20 dark:hover:bg-teal-600 transition-all duration-200 transform hover:scale-105">
            <Copy className="h-5 w-5 mr-2" />
            {isCopied ? 'Copied!' : 'Copy Feedback'}
          </Button>
          <Button onClick={handleDownloadPDF} variant="outline" className="h-12 text-lg px-6 bg-white/20 hover:bg-teal-500 hover:text-white dark:bg-gray-700/20 dark:hover:bg-teal-600 transition-all duration-200 transform hover:scale-105">
            <Download className="h-5 w-5 mr-2" />
            Download Report (PDF)
          </Button>
          <Button onClick={handleStartOver} variant="secondary" className="h-12 text-lg px-6 bg-teal-500 hover:bg-teal-600 dark:bg-teal-600 dark:hover:bg-teal-700 text-white shadow-md hover:shadow-lg transition-all duration-200 transform hover:scale-105">
            <RefreshCw className="h-5 w-5 mr-2" />
            Start New Analysis
          </Button>
        </div>

        <Card className="p-8 space-y-6 bg-white/30 dark:bg-gray-800/30 backdrop-blur-md border border-white/20 dark:border-gray-700/20 shadow-xl rounded-2xl transition-all duration-200 hover:shadow-2xl">
          <CardHeader className="p-0">
            <CardTitle className="text-3xl font-bold text-gray-800 dark:text-white">Detailed Feedback</CardTitle>
            <CardDescription className="text-lg text-gray-600 dark:text-gray-300">Breakdown of your resume's strengths, weaknesses, and key mismatches.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-8 p-0">
            {analysisData.feedback.strengths && analysisData.feedback.strengths.length > 0 && (
              <div className="space-y-3">
                <h3 className="text-2xl font-bold flex items-center gap-2 text-green-600 dark:text-green-400">
                  <CheckCircle className="h-6 w-6" />
                  Strengths
                </h3>
                <ul className="list-disc pl-8 space-y-2 text-lg text-gray-800 dark:text-gray-200">
                  {analysisData.feedback.strengths.map((item, index) => (
                    <li key={`strength-${index}`} className="hover:text-teal-500 transition-colors duration-200">{item}</li>
                  ))}
                </ul>
                <Separator className="my-6 bg-gray-300 dark:bg-gray-700" />
              </div>
            )}

            {analysisData.feedback.areasForImprovement && analysisData.feedback.areasForImprovement.length > 0 && (
              <div className="space-y-3">
                <h3 className="text-2xl font-bold flex items-center gap-2 text-yellow-600 dark:text-yellow-400">
                  <AlertCircle className="h-6 w-6" />
                  Areas for Improvement
                </h3>
                <ul className="list-disc pl-8 space-y-2 text-lg text-gray-800 dark:text-gray-200">
                  {analysisData.feedback.areasForImprovement.map((item, index) => (
                    <li key={`improvement-${index}`} className="hover:text-teal-500 transition-colors duration-200">{item}</li>
                  ))}
                </ul>
                <Separator className="my-6 bg-gray-300 dark:bg-gray-700" />
              </div>
            )}

            {analysisData.feedback.keyMismatches && analysisData.feedback.keyMismatches.length > 0 && (
              <div className="space-y-3">
                <h3 className="text-2xl font-bold flex items-center gap-2 text-red-600 dark:text-red-400">
                  <XCircle className="h-6 w-6" />
                  Key Mismatches
                </h3>
                <ul className="list-disc pl-8 space-y-2 text-lg text-gray-800 dark:text-gray-200">
                  {analysisData.feedback.keyMismatches.map((item, index) => (
                    <li key={`mismatch-${index}`} className="hover:text-teal-500 transition-colors duration-200">{item}</li>
                  ))}
                </ul>
                <Separator className="my-6 bg-gray-300 dark:bg-gray-700" />
              </div>
            )}

            {analysisData.suggestedImprovementsForTechRoles && analysisData.suggestedImprovementsForTechRoles.length > 0 && (
              <div className="space-y-3">
                <h3 className="text-2xl font-bold flex items-center gap-2 text-teal-600 dark:text-teal-400">
                  <CheckCircle className="h-6 w-6" />
                  Suggested Improvements (If Applying for Tech Roles)
                </h3>
                <ul className="list-disc pl-8 space-y-2 text-lg text-gray-800 dark:text-gray-200">
                  {analysisData.suggestedImprovementsForTechRoles.map((item, index) => (
                    <li key={`tech-improvement-${index}`} className="hover:text-teal-500 transition-colors duration-200">{item}</li>
                  ))}
                </ul>
              </div>
            )}
          </CardContent>
        </Card>

        <Card className="p-8 bg-white/20 dark:bg-gray-700/20 backdrop-blur-md border border-white/20 dark:border-gray-700/20 shadow-inner rounded-2xl text-center animate-fade-in-up">
          <CardContent className="space-y-4 py-0">
            <h3 className="text-xl font-bold text-gray-800 dark:text-white">Smart Resume Analyzer</h3>
            <p className="text-muted-foreground text-base">AI-powered resume optimization for better job opportunities</p>
            <p className="text-sm text-gray-600 dark:text-gray-300">
              Built  by <span className="font-semibold text-teal-500 dark:text-teal-400">Sanjo</span>
            </p>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default Results;