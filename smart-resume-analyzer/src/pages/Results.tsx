// src/pages/Results.tsx
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";
import { Copy, Download, RefreshCw, ArrowLeft } from "lucide-react";
import { toast } from "sonner";

// Define an interface for the expected JSON structure from the AI
interface AnalysisData {
  matchScore: number;
  feedback: {
    overall: string;
    strengths: string[];
    areasForImprovement: string[];
    keyMismatches: string[];
  };
  suggestedImprovementsForTechRoles: string[];
}

const Results = () => {
  const [isCopied, setIsCopied] = useState(false);
  const navigate = useNavigate();

  const storedAnalysis = localStorage.getItem('fullAnalysisResult');
  const [analysisData, setAnalysisData] = useState<AnalysisData | null>(null);
  const jobDescription = localStorage.getItem('jobDescription') || ""; // Keep for context

  useEffect(() => {
    if (storedAnalysis) {
      try {
        setAnalysisData(JSON.parse(storedAnalysis));
      } catch (e) {
        console.error("Failed to parse analysis data from localStorage", e);
        setAnalysisData(null);
        toast.error("Error loading analysis data. Please try re-analyzing.");
      }
    }
  }, [storedAnalysis]);


  const handleCopyFeedback = async () => {
    // Construct text from the parsed data for copying
    if (!analysisData) {
      toast.error("No analysis data to copy.");
      return;
    }
    let fullFeedback = `SMART RESUME ANALYZER - FEEDBACK REPORT\n\n`;
    fullFeedback += `Match Score: ${analysisData.matchScore}/100\n\n`;
    fullFeedback += `Feedback: ${analysisData.feedback.overall}\n\n`;

    if (analysisData.feedback.strengths && analysisData.feedback.strengths.length > 0) {
      fullFeedback += `Strengths:\n- ${analysisData.feedback.strengths.join('\n- ')}\n\n`;
    }
    if (analysisData.feedback.areasForImprovement && analysisData.feedback.areasForImprovement.length > 0) {
      fullFeedback += `Areas for Improvement:\n- ${analysisData.feedback.areasForImprovement.join('\n- ')}\n\n`;
    }
    if (analysisData.feedback.keyMismatches && analysisData.feedback.keyMismatches.length > 0) {
      fullFeedback += `Key Mismatches:\n- ${analysisData.feedback.keyMismatches.join('\n- ')}\n\n`;
    }
    if (analysisData.suggestedImprovementsForTechRoles && analysisData.suggestedImprovementsForTechRoles.length > 0) {
      fullFeedback += `Suggested Improvements (If Applying for Tech Roles):\n- ${analysisData.suggestedImprovementsForTechRoles.join('\n- ')}\n\n`;
    }
    fullFeedback += `\n---\nGenerated by Smart Resume Analyzer\nBuilt by Sanjo`;


    try {
      await navigator.clipboard.writeText(fullFeedback);
      setIsCopied(true);
      toast.success("Feedback copied to clipboard!");
      setTimeout(() => setIsCopied(false), 2000);
    } catch (error) {
      toast.error("Failed to copy feedback");
    }
  };

  const handleDownloadPDF = () => {
    toast.info("PDF download feature coming soon!");
  };

  const handleStartOver = () => {
    localStorage.clear();
    navigate('/');
  };

  // If no analysis data is found or successfully parsed, show a message
  if (!analysisData) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center p-6">
        <Card className="max-w-md">
          <CardHeader>
            <CardTitle>No Analysis Found</CardTitle>
            <CardDescription>Please upload a resume and analyze a job description first.</CardDescription>
          </CardHeader>
          <CardContent>
            <Button onClick={() => navigate('/')} className="w-full">
              Start Analysis
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background p-6">
      <div className="max-w-4xl mx-auto space-y-8">
        {/* Header */}
        <div className="text-center space-y-4 relative">
          <Button
            variant="ghost"
            onClick={() => navigate('/job-description')} // Go back to job description if needed
            className="absolute left-0 top-0"
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back
          </Button>

          <h1 className="text-4xl font-bold text-primary">Summary & Suggestions</h1>
          <p className="text-xl text-muted-foreground">Your complete resume analysis and recommendations</p>
        </div>

        {/* Action Buttons */}
        <div className="flex flex-wrap gap-3 justify-center">
          <Button onClick={handleCopyFeedback} variant="outline">
            <Copy className="h-4 w-4 mr-2" />
            {isCopied ? 'Copied!' : 'Copy Feedback'}
          </Button>

          <Button onClick={handleDownloadPDF} variant="outline">
            <Download className="h-4 w-4 mr-2" />
            Download as PDF
          </Button>

          <Button onClick={handleStartOver} variant="secondary">
            <RefreshCw className="h-4 w-4 mr-2" />
            Start Over
          </Button>
        </div>

        {/* Display the combined analysis using structured JSON data */}
        <Card>
          <CardHeader>
            <CardTitle>Resume & Job Match Analysis</CardTitle>
            <CardDescription>Complete AI-powered feedback</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="prose prose-sm max-w-none dark:prose-invert">
              {/* Match Score */}
              {analysisData.matchScore !== undefined && (
                <p className="text-2xl font-bold text-center mb-6">
                  Match Score: <span className="text-primary">{analysisData.matchScore}/100</span>
                </p>
              )}

              {/* Overall Feedback */}
              {analysisData.feedback.overall && (
                <>
                  <h2 className="text-xl font-bold mt-6 mb-3">Overall Feedback</h2>
                  <p className="mb-2">{analysisData.feedback.overall}</p>
                </>
              )}

              {/* Strengths */}
              {analysisData.feedback.strengths && analysisData.feedback.strengths.length > 0 && (
                <>
                  <h3 className="text-lg font-semibold mt-4 mb-2">✅ Strengths</h3>
                  <ul className="list-disc pl-5">
                    {analysisData.feedback.strengths.map((item, index) => (
                      <li key={`strength-${index}`} className="mb-1">{item}</li>
                    ))}
                  </ul>
                </>
              )}

              {/* Areas for Improvement */}
              {analysisData.feedback.areasForImprovement && analysisData.feedback.areasForImprovement.length > 0 && (
                <>
                  <h3 className="text-lg font-semibold mt-4 mb-2">⚠️ Areas for Improvement</h3>
                  <ul className="list-disc pl-5">
                    {analysisData.feedback.areasForImprovement.map((item, index) => (
                      <li key={`improvement-${index}`} className="mb-1">{item}</li>
                    ))}
                  </ul>
                </>
              )}

              {/* Key Mismatches */}
              {analysisData.feedback.keyMismatches && analysisData.feedback.keyMismatches.length > 0 && (
                <>
                  <h3 className="text-lg font-semibold mt-4 mb-2">Key Mismatches</h3>
                  <ul className="list-disc pl-5">
                    {analysisData.feedback.keyMismatches.map((item, index) => (
                      <li key={`mismatch-${index}`} className="mb-1">{item}</li>
                    ))}
                  </ul>
                </>
              )}

              {/* Suggested Improvements for Tech Roles */}
              {analysisData.suggestedImprovementsForTechRoles && analysisData.suggestedImprovementsForTechRoles.length > 0 && (
                <>
                  <h3 className="text-lg font-semibold mt-4 mb-2">Suggested Improvements (If Applying for Tech Roles)</h3>
                  <ul className="list-disc pl-5">
                    {analysisData.suggestedImprovementsForTechRoles.map((item, index) => (
                      <li key={`tech-improvement-${index}`} className="mb-1">{item}</li>
                    ))}
                  </ul>
                </>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Footer */}
        <Card className="border-dashed">
          <CardContent className="text-center py-8">
            <h3 className="text-lg font-semibold mb-2">Smart Resume Analyzer</h3>
            <p className="text-muted-foreground mb-4">
              AI-powered resume optimization for better job opportunities
            </p>
            <p className="text-sm text-muted-foreground">
              Built by <span className="font-semibold">Sanjo</span>
            </p>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default Results;